# Azure Pipelines
# https://aka.ms/yaml

name: DevSkim_Rules_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - rules/default/*

stages:
- stage: Publish
  jobs:
  - job: publish
    displayName: Publish DevSkim Rules
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.100'
    - task: DotNetCoreCLI@2
      displayName: Dotnet Build .NET Core App
      inputs:
        command: 'build'
        arguments: 'Microsoft.DevSkim.CLI -c $(BuildConfiguration) -o $(Build.BinariesDirectory)\netcoreapp3.1\DevSkim_$(ReleaseVersion) -f netcoreapp3.1 /p:DebugType=None'
        workingDirectory: '$(SolutionDirectory)'
        publishWebProjects: false
        zipAfterPublish: false		
    - task: AntiMalware@3
      displayName: Anti-Malware Scan
      inputs:
        InputType: 'Basic'
        ScanType: 'CustomScan'
        FileDirPath: '$(Build.BinariesDirectory)'
        EnableServices: true
        SupportLogOnError: false
        TreatSignatureUpdateFailureAs: 'Warning'
        SignatureFreshness: 'UpToDate'
        TreatStaleSignatureAs: 'Error'

    #TODO Pack rules

	- task: PublishBuildArtifacts@1
      displayName: Store Rules Artifact
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)'
        ArtifactName: 'DevSkim_Rules'
        publishLocation: 'Container'
	
    #TODO Update CLI Rules GitHub
    #TODO Update VSExt Rules GitHub
    #TODO Update VSCode Rules GitHub
	#TODO Trigger CLI, Extension build pipelines

  - job: sdl
    displayName: SDL Tools
    condition: eq(variables['RunSDL'], 'TRUE')
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: AntiMalware@3
      displayName: Anti-Malware Scan
      inputs:
        InputType: 'Basic'
        ScanType: 'CustomScan'
        FileDirPath: '$(Build.StagingDirectory)'
        EnableServices: true
        SupportLogOnError: false
        TreatSignatureUpdateFailureAs: 'Warning'
        SignatureFreshness: 'UpToDate'
        TreatStaleSignatureAs: 'Error'
    - task: ComponentGovernanceComponentDetection@0
      displayName: Component Governance
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        alertWarningLevel: 'Low'
    - task: PoliCheck@1
      displayName: PoliCheck
      inputs:
        inputType: 'Basic'
        targetType: 'F'
        targetArgument: '$(SolutionDirectory)'
        result: 'PoliCheck.xml'
    - task: BinSkim@3
      displayName: BinSkim
      inputs:
        InputType: 'CommandLine'
      continueOnError: true
    - task: PublishPipelineArtifact@1
      displayName: Publish PoliCheck Result
      inputs:
        targetPath: '$(Pipeline.Workspace)\_sdt\logs\PoliCheck\PoliCheck.xml'
        artifact: 'PoliCheck.xml'
    - task: PublishPipelineArtifact@1
      displayName: Publish BinSkim Result
      inputs:
        targetPath: '$(Pipeline.Workspace)\_sdt\logs\BinSkim\BinSkim.sarif'
        artifact: 'BinSkim.sarif'
      continueOnError: true
